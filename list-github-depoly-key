#!/bin/bash

# 設定參數
CACHE_DIR="${HOME}/.cache/gh-deploy-keys"
REPOS_CACHE_FILE="${CACHE_DIR}/repo-list.txt"
CACHE_EXPIRY=86400  # 快取過期時間（秒）：1天 = 86400秒

# 解析命令行參數
CLEAN_CACHE=false
CLEAN_ALL_KEYS=false
while [[ $# -gt 0 ]]; do
  case $1 in
    --clean|-c)
      CLEAN_CACHE=true
      shift
      ;;
    --clean-all-keys|-K)
      CLEAN_ALL_KEYS=true
      shift
      ;;
    --help|-h)
      echo "用法: $0 [選項]"
      echo "選項:"
      echo "  --clean, -c          清理快取並重新從 GitHub API 獲取數據"
      echo "  --clean-all-keys, -K 移除所有 repository 中的所有 deploy keys (需要確認)"
      echo "  --help, -h           顯示此幫助信息"
      exit 0
      ;;
    *)
      echo "未知選項: $1"
      echo "使用 '$0 --help' 獲取更多信息"
      exit 1
      ;;
  esac
done

# 如果指定了清理快取，則刪除快取目錄
if [[ "$CLEAN_CACHE" = true ]]; then
  echo "正在清理快取..."
  rm -rf "${CACHE_DIR}"
  echo "快取已清理，將重新獲取數據"
fi

# 函數：檢查檔案是否存在且未過期
check_cache_valid() {
  local cache_file=$1

  if [[ ! -f "${cache_file}" ]]; then
    return 1
  fi

  local file_time=$(stat -c %Y "${cache_file}" 2>/dev/null || stat -f %m "${cache_file}")
  local current_time=$(date +%s)
  local elapsed_time=$((current_time - file_time))

  if [[ ${elapsed_time} -lt ${CACHE_EXPIRY} ]]; then
    return 0  # 快取有效
  else
    return 1  # 快取過期
  fi
}

# 函數：格式化時間戳
format_timestamp() {
  local file=$1
  date -r "${file}" '+%Y-%m-%d %H:%M:%S'
}

# 函數：取得 repository 列表
get_repos() {
  mkdir -p "${CACHE_DIR}"

  if check_cache_valid "${REPOS_CACHE_FILE}"; then
    echo "使用本地 repository 快取（建立於 $(format_timestamp "${REPOS_CACHE_FILE}")）"
    cat "${REPOS_CACHE_FILE}"
    return
  fi

  echo "從 GitHub API 獲取 repository 列表..."
  # 取得使用者的 repo 總數 (使用正確方式處理分頁)
  local total=$(gh api --paginate /user/repos | jq '. | length' | paste -sd+ | bc)

  if [[ "$total" -eq 0 ]]; then
    echo "No repositories found."
    exit 1
  fi

  # 獲取 repo 列表並儲存到 cache
  gh repo list -L "$total" | awk '{print $1}' > "${REPOS_CACHE_FILE}"
  cat "${REPOS_CACHE_FILE}"
}

# 函數：取得 deploy keys
get_deploy_keys() {
  local repo=$1
  local repo_cache_file="${CACHE_DIR}/$(echo "$repo" | tr '/' '-')-keys.txt"

  if check_cache_valid "${repo_cache_file}"; then
    echo "（使用本地快取，建立於 $(format_timestamp "${repo_cache_file}")）"
    cat "${repo_cache_file}"
    return 0  # 使用快取，無更新
  fi

  # 獲取 deploy key 列表並儲存到 cache
  local deploy_keys=$(gh repo deploy-key list --repo "$repo")
  echo "$deploy_keys" > "${repo_cache_file}"
  echo "$deploy_keys"
  return 1  # 有更新
}

# 函數：取得 deploy key IDs
get_deploy_key_ids() {
  local repo=$1
  gh repo deploy-key list --repo "$repo" | awk '{print $1}'
}

# 函數：移除指定 repository 的所有 deploy keys
clean_repo_deploy_keys() {
  local repo=$1
  echo -e "\n==== 開始移除 $repo 的所有 deploy keys ===="
  local key_ids=$(get_deploy_key_ids "$repo")
  if [[ -z "$key_ids" ]]; then
    echo "  沒有找到任何 deploy keys。"
    return
  fi
  while read -r key_id; do
    echo "  正在移除 key ID: $key_id"
    gh repo deploy-key delete --repo "$repo" "$key_id"
    if [[ $? -ne 0 ]]; then
      echo "  移除 key ID: $key_id 失敗！"
    fi
  done <<< "$key_ids"
  echo "==== 完成移除 $repo 的所有 deploy keys ===="
}

# 主流程
main() {
  # 獲取所有 repositories
  repos=$(get_repos)
  total_repos=$(echo "$repos" | wc -l)

  echo "Total repositories detected: $total_repos"

  if [[ "$CLEAN_ALL_KEYS" = true ]]; then
    echo -e "\n警告：您已選擇移除所有 repository 中的所有 deploy keys。"
    read -p "請輸入 'yes' 以確認此操作： " confirmation
    if [[ "$confirmation" != "yes" ]]; then
      echo "操作已取消。"
      exit 0
    fi
    echo "開始移除所有 repository 的 deploy keys..."
    while read -r repo; do
      [[ -z "$repo" ]] && continue
      clean_repo_deploy_keys "$repo"
    done <<< "$repos"
    echo -e "\n所有 repository 的 deploy keys 移除完成！"
  else
    echo "開始檢查 $total_repos 個 repositories..."

    # 記錄是否有更新
    local has_updates=false

    # 逐一處理 repo
    while read -r repo; do
      [[ -z "$repo" ]] && continue

      echo -e "\n==== $repo ===="

      # 取得並顯示 deploy keys
      get_deploy_keys "$repo"
      if [[ $? -eq 1 ]]; then
        has_updates=true
      fi
    done <<< "$repos"

    # 如果有更新，重設 repositories 快取時間戳記
    if [[ "$has_updates" = true ]]; then
      touch "${REPOS_CACHE_FILE}"
    fi

    echo -e "\n檢查完成！"
  fi
}

# 執行主函數
main
